#!/bin/bash

echo "üîß PhishingSense RLS Policy Fix"
echo "==============================="
echo ""
echo "The error shows that RLS policies are blocking user profile creation."
echo "Error: 'new row violates row-level security policy for table \"users\"'"
echo "Error Code: 42501 (insufficient privilege)"
echo ""
echo "üîç Current Issue:"
echo "‚Ä¢ Database tables exist ‚úÖ"
echo "‚Ä¢ User signup works ‚úÖ"
echo "‚Ä¢ RLS policies are blocking INSERT operations ‚ùå"
echo ""
echo "üí° Solutions:"
echo ""

echo "Option 1: Check and Fix RLS Policies (Recommended)"
echo "=================================================="
echo "1. Go to: https://supabase.com/dashboard/project/saxmpvvgjkidotpqsaht"
echo "2. Navigate to: Database ‚Üí Policies"
echo "3. Find the 'users' table policies"
echo "4. Ensure this policy exists:"
echo ""
echo "   Policy Name: Users can insert their own profile"
echo "   Command: INSERT"
echo "   Policy: (auth.uid() = id)"
echo ""
echo "5. If missing, run this SQL in SQL Editor:"
echo ""
echo "   -- Enable RLS on users table"
echo "   ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;"
echo ""
echo "   -- Create the missing INSERT policy"
echo "   CREATE POLICY \"Users can insert their own profile\" ON public.users"
echo "       FOR INSERT WITH CHECK (auth.uid() = id);"
echo ""

echo "Option 2: Quick RLS Policy Reset"
echo "================================"
echo "Run this SQL to reset all RLS policies:"
echo ""
echo "   -- Drop existing policies"
echo "   DROP POLICY IF EXISTS \"Users can view their own profile\" ON public.users;"
echo "   DROP POLICY IF EXISTS \"Users can insert their own profile\" ON public.users;"
echo "   DROP POLICY IF EXISTS \"Users can update their own profile\" ON public.users;"
echo ""
echo "   -- Recreate policies"
echo "   CREATE POLICY \"Users can view their own profile\" ON public.users"
echo "       FOR SELECT USING (auth.uid() = id);"
echo ""
echo "   CREATE POLICY \"Users can insert their own profile\" ON public.users"
echo "       FOR INSERT WITH CHECK (auth.uid() = id);"
echo ""
echo "   CREATE POLICY \"Users can update their own profile\" ON public.users"
echo "       FOR UPDATE USING (auth.uid() = id);"
echo ""

echo "Option 3: Debug the Issue"
echo "=========================="
echo "1. In your app, open browser console"
echo "2. Run: await AuthService.debugConnection()"
echo "3. Check if it shows RLS policy issues"
echo ""
echo "4. Also check what auth.uid() returns:"
echo "   - Open Supabase Dashboard"
echo "   - Go to Authentication ‚Üí Users"
echo "   - Verify the user exists and has the same ID"
echo ""

echo "üîç Expected Behavior After Fix:"
echo "================================"
echo "‚Ä¢ User signup should create profile automatically"
echo "‚Ä¢ No more 42501 errors"
echo "‚Ä¢ Full authentication flow working"
echo ""
echo "üìã Alternative: Temporary Disable RLS (for testing only)"
echo "=========================================================="
echo "‚ö†Ô∏è  WARNING: Only use this for debugging!"
echo ""
echo "   -- Temporarily disable RLS (for testing)"
echo "   ALTER TABLE public.users DISABLE ROW LEVEL SECURITY;"
echo ""
echo "   -- Re-enable after testing"
echo "   ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;"
echo ""

echo "üöÄ Next Steps:"
echo "1. Check RLS policies in Supabase Dashboard"
echo "2. Run the appropriate SQL fix above"
echo "3. Restart your dev server: pkill -f 'next dev' && pnpm dev"
echo "4. Test signup again"
echo ""
echo "üí° The enhanced error logging is working perfectly!"
echo "   You're now getting detailed error codes instead of empty objects."
